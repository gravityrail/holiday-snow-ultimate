!function(t){var n={};function e(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return t[a].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,a){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:a})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s="./jssrc/scene.js")}({"./jssrc/scene.js":function(module,exports,__webpack_require__){eval('__webpack_require__(/*! aframe-mountain-component */ "./node_modules/aframe-mountain-component/index.js");\n__webpack_require__(/*! ./snow-particles */ "./jssrc/snow-particles.js");\n__webpack_require__(/*! ./snow-material */ "./jssrc/snow-material.js");\n// require(\'./terrain-snow\');\n\n//# sourceURL=webpack:///./jssrc/scene.js?')},"./jssrc/snow-material.js":function(module,exports){eval("const vertexShader = `\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat cloud(vec2 st) {\n    float n = 0.0;\n    for (float i = 1.0; i < 8.0; i ++) {\n        float m = pow(2.0, i);\n        n += snoise(st * m) * (1.0 / m);\n    }\n    return n * 0.5 + 0.5;\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n    st.x *= u_resolution.x / u_resolution.y;\n    float v = cloud(st);\n    gl_FragColor = vec4(vec3(v), 1.0);\n}\n`;\n\nAFRAME.registerComponent('material-snow', {\n\tschema: {},// { color: { type: 'color', default: '#FFF' }, backgroundImage: { type: 'asset' } },\n\n\t/**\n\t * Creates a new ShaderMaterial and assigns to a buffer geometry containing lots of snowflakes\n\t */\n\tinit: function () {\n\t\tconst data = this.data;\n\n\n\t\tconst uniforms = {\n\t\t\t// color:      { type: \"c\", value: new THREE.Color( data.color ) },\n\t\t\t// texture:    { type: \"t\", value: 0, texture: map },\n\t\t\t// globalTime:\t{ type: \"f\", value: 0.0 },\n\t\t};\n\n\t\tthis.material  = new THREE.ShaderMaterial({\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader,\n\t\t\t// fragmentShader,\n\t\t\tblending: \t\tTHREE.AdditiveBlending,\n\t\t\tdepthTest: \t\tfalse,\n\t\t\ttransparent:\ttrue,\n\t\t\t// vertexColors:   true\n\t\t});\n\n\t\t// create particle geometry\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tconst numSnowflakes = 10000;\n\n\t\tconst positions = [];\n\t\tconst colors = [];\n\t\tconst sizes = [];\n\t\tconst times = [];\n\n\t\tfor( var v = 0; v < numSnowflakes; v++ ) {\n\t\t\tvar color = new THREE.Color( 0xffffff );\n\t\t\tcolor.setHSL(1.0, 0.0, 0.05 + Math.random()*0.9);\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tpositions.push( Math.random()*10 - 5, Math.random()*10 - 5, Math.random()*10 - 5 );\n\t\t\tsizes.push( 0.1+Math.random() );\n\t\t\ttimes.push( Math.random() );\n\t\t}\n\n\t\t// console.log(positions);\n\n\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n\t\tgeometry.addAttribute('customColor', new THREE.Float32BufferAttribute(colors, 3));\n\t\tgeometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n\t\tgeometry.addAttribute('time', new THREE.Float32BufferAttribute(times, 1));\n\n\t\tvar particles = new THREE.Points( geometry, this.material );\n\t\tparticles.position.x = 0;\n\t\tparticles.position.y = 5;\n\t\tparticles.position.z = 0;\n\n\t\tconsole.log(\"adding particles\");\n\n\t\t// this.el.sceneEl.object3D.background = new THREE.Color('#000');\n\t\tthis.el.object3D.add( particles );\n\n\t\t// this.applyToMesh();\n\t\t// this.el.addEventListener('model-loaded', () => this.applyToMesh());\n\t},\n\n\n\t/**\n\t * Update the ShaderMaterial when component data changes.\n\t */\n\t// update: function () {\n\n\t// \ttime = new Date().getTime();\n\t// \tdelta = time - this.oldTime;\n\t// \tthis.oldTime = time;\n\n\t// \tif (isNaN(delta) || delta > 1000 || delta == 0 ) {\n\t// \t\tdelta = 1000/60;\n\t// \t}\n\n\t// \tthis.uniforms.globalTime.value += delta * 0.00015;\n\n\t// \t// targetPosition.x += (mouseXpercent*250 - targetPosition.x)/20;\n\t// \t// targetPosition.y += (-mouseYpercent*300 - targetPosition.y)/20;\n\t// \t// camera.lookAt(targetPosition);\n\n\t// \t// this.material.uniforms.color.value.set(this.data.color);\n\t// },\n\n\t/**\n\t * Apply the material to the current entity.\n\t */\n\t// applyToMesh: function() {\n\t// \tconst mesh = this.el.getObject3D('mesh');\n\t// \tif (mesh) {\n\t// \t\tmesh.material = this.material;\n\t// \t}\n\t// },\n\n\t/**\n\t * On each frame, update the 'time' uniform in the shaders.\n\t */\n\t// tick: function (t) {\n\t// \t// console.log(\"tick \"+t);\n\t// \tthis.material.uniforms.globalTime.value = t * 0.00015;\n\t// }\n\n})\n\n//# sourceURL=webpack:///./jssrc/snow-material.js?")},"./jssrc/snow-particles.js":function(module,exports){eval("AFRAME.registerComponent('particles-snow', {\n\tschema: { sprite: { type: 'asset' } },\n\tinit: function () {\n\t\tvar snowSprite = new THREE.TextureLoader().load( this.data.sprite );\n\t\tvar particleCount = 2000;\n\t\tvar pMaterial = new THREE.PointsMaterial({\n\t\t\tcolor: 0xFFFFFF,\n\t\t\tsize: 0.5,\n\t\t\tmap: snowSprite,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.particles = new THREE.Geometry;\n\n\t\tfor (var i = 0; i < particleCount; i++) {\n\t\t\tvar pX = Math.random()*100 - 50,\n\t\t\tpY = Math.random()*100,\n\t\t\tpZ = Math.random()*100 - 50,\n\t\t\tparticle = new THREE.Vector3(pX, pY, pZ);\n\t\t\tparticle.velocity = {};\n\t\t\tparticle.velocity.y = -0.001;\n\t\t\tthis.particles.vertices.push(particle);\n\t\t}\n\n\t\tvar particleSystem = new THREE.Points(this.particles, pMaterial);\n\t\tparticleSystem.position.y = 0;\n\t\t// scene.add(particleSystem);\n\n\n\t\t// this.el.setObject3D( 'mesh', particleSystem );\n\t\tthis.el.object3D.add( particleSystem );\n\t\t// simulateRain();\n\t},\n\n\ttick: function (t) {\n\t\tvar pCount = this.particles.vertices.length;\n\t\twhile (pCount--) {\n\t\t\tvar particle = this.particles.vertices[pCount];\n\t\t\tif (particle.y < -0) {\n\t\t\t\tparticle.y = 100;\n\t\t\t\tparticle.velocity.y = -0.001;\n\t\t\t}\n\n\t\t\tparticle.velocity.y -= Math.random() * .001;\n\n\t\t\tparticle.y += particle.velocity.y;\n\t\t}\n\n\t\tthis.particles.verticesNeedUpdate = true;\n\t}\n});\n\n\n\n//# sourceURL=webpack:///./jssrc/snow-particles.js?")},"./node_modules/aframe-mountain-component/index.js":function(module,exports,__webpack_require__){eval("var ImprovedNoise = __webpack_require__(/*! ./lib/ImprovedNoise.js */ \"./node_modules/aframe-mountain-component/lib/ImprovedNoise.js\");\n\n/**\n * Mountain component.\n */\nAFRAME.registerComponent('mountain', {\n  schema: {\n    color: {default: 'rgb(92, 32, 0)'},\n    shadowColor: {default: 'rgb(128, 96, 96)'},\n    sunPosition: {type: 'vec3', default: {x: 1, y: 1, z: 1}},\n    worldDepth: {default: 256},\n    worldWidth: {default: 256}\n  },\n\n  update: function () {\n    var data = this.data;\n\n    var worldDepth = data.worldDepth;\n    var worldWidth = data.worldWidth;\n\n    // Generate heightmap.\n    var terrainData = generateHeight(worldWidth, worldDepth);\n\n    // Texture.\n    var canvas = generateTexture(\n      terrainData, worldWidth, worldDepth, new THREE.Color(data.color),\n      new THREE.Color(data.shadowColor), data.sunPosition);\n    var texture = new THREE.CanvasTexture(canvas);\n\t\ttexture.wrapS = THREE.ClampToEdgeWrapping;\n\t\ttexture.wrapT = THREE.ClampToEdgeWrapping;\n\n    // Create geometry.\n    var geometry = new THREE.PlaneBufferGeometry(7500, 7500, worldWidth - 1, worldDepth - 1);\n    geometry.rotateX(- Math.PI / 2);\n\t\tvar vertices = geometry.attributes.position.array;\n\t\tfor (var i = 0, j = 0, l = vertices.length; i < l; i ++, j += 3) {\n\t\t  vertices[j + 1] = terrainData[i] * 10;\n    }\n\n    // Lower geometry.\n    geometry.translate(\n      0, -1 * (terrainData[worldWidth / 2 + worldDepth / 2* worldWidth] * 10 + 500), 0\n    );\n\n    // Create material.\n    var material = new THREE.MeshBasicMaterial({map: texture});\n\n    // Create mesh.\n    var mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({map: texture}));\n    this.el.setObject3D('mesh', mesh);\n  }\n});\n\nfunction generateHeight (width, height) {\n  var size = width * height;\n  var data = new Uint8Array(size);\n  var perlin = new ImprovedNoise();\n  var quality = 1;\n  var z = Math.random() * 100;\n\n  for (var j = 0; j < 4; j ++) {\n    for (var i = 0; i < size; i ++) {\n      var x = i % width, y = ~~ (i / width);\n      data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n    }\n    quality *= 5;\n  }\n\n  return data;\n}\n\nfunction generateTexture (terrainData, width, height, color, colorShadow, sunPos) {\n  var sun = new THREE.Vector3(sunPos.x, sunPos.y, sunPos.z);\n  sun.normalize();\n\n  // Create canvas and context.\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  var context = canvas.getContext('2d');\n  context.fillStyle = '#000';\n  context.fillRect(0, 0, width, height);\n\n  var image = context.getImageData(0, 0, canvas.width, canvas.height);\n  var imageData = image.data;\n\n  // Convert three.js rgb to 256.\n  var red = color.r * 256;\n  var green = color.g * 256;\n  var blue = color.b * 256;\n  var redShadow = colorShadow.r * 256;\n  var greenShadow = colorShadow.g * 256;\n  var blueShadow = colorShadow.b * 256;\n\n  var shade;\n  var vector3 = new THREE.Vector3(0, 0, 0);\n  for (var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++) {\n    vector3.x = terrainData[j - 2] - terrainData[j + 2];\n    vector3.y = 2;\n    vector3.z = terrainData[j - width * 2] - terrainData[j + width * 2];\n    vector3.normalize();\n    shade = vector3.dot(sun);\n    imageData[i] = (red + shade * redShadow) * (0.5 + terrainData[j] * 0.007);\n    imageData[i + 1] = (green + shade * blueShadow) * (0.5 + terrainData[j] * 0.007);\n    imageData[i + 2] = (blue + shade * greenShadow) * (0.5 + terrainData[j] * 0.007);\n  }\n\n  context.putImageData(image, 0, 0);\n\n  // Scaled 4x.\n  var canvasScaled = document.createElement('canvas');\n  canvasScaled.width = width * 4;\n  canvasScaled.height = height * 4;\n\n  context = canvasScaled.getContext('2d');\n  context.scale(4, 4);\n  context.drawImage(canvas, 0, 0);\n\n  image = context.getImageData(0, 0, canvasScaled.width, canvasScaled.height);\n  imageData = image.data;\n\n  for (var i = 0, l = imageData.length; i < l; i += 4) {\n    var v = ~~ (Math.random() * 5);\n    imageData[i] += v;\n    imageData[i + 1] += v;\n    imageData[i + 2] += v;\n  }\n\n  context.putImageData(image, 0, 0);\n  return canvasScaled;\n}\n\n/**\n * <a-mountain>\n */\nAFRAME.registerPrimitive('a-mountain', {\n  defaultComponents: {\n    mountain: {}\n  },\n\n  mappings: {\n    color: 'mountain.color',\n    'shadow-color': 'mountain.shadowColor',\n    'sun-position': 'mountain.sunPosition',\n    'world-depth' :'mountain.worldDepth',\n    'world-width' :'mountain.worldWidth'\n  }\n});\n\n\n//# sourceURL=webpack:///./node_modules/aframe-mountain-component/index.js?")},"./node_modules/aframe-mountain-component/lib/ImprovedNoise.js":function(module,exports){eval("// http://mrl.nyu.edu/~perlin/noise/\n\nvar ImprovedNoise = function () {\n\n\tvar p = [ 151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,\n\t\t 23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,\n\t\t 174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,\n\t\t 133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,\n\t\t 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,\n\t\t 202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,\n\t\t 248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,\n\t\t 178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,\n\t\t 14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,\n\t\t 93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180 ];\n\n\tfor (var i = 0; i < 256 ; i ++) {\n\n\t\tp[256 + i] = p[i];\n\n\t}\n\n\tfunction fade(t) {\n\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\n\n\t}\n\n\tfunction lerp(t, a, b) {\n\n\t\treturn a + t * (b - a);\n\n\t}\n\n\tfunction grad(hash, x, y, z) {\n\n\t\tvar h = hash & 15;\n\t\tvar u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n\t\treturn ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n\n\t}\n\n\treturn {\n\n\t\tnoise: function (x, y, z) {\n\n\t\t\tvar floorX = ~~x, floorY = ~~y, floorZ = ~~z;\n\n\t\t\tvar X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n\t\t\tx -= floorX;\n\t\t\ty -= floorY;\n\t\t\tz -= floorZ;\n\n\t\t\tvar xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n\t\t\tvar u = fade(x), v = fade(y), w = fade(z);\n\n\t\t\tvar A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z, B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;\n\n\t\t\treturn lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n\t\t\t\t\t\t\tgrad(p[BA], xMinus1, y, z)),\n\t\t\t\t\t\tlerp(u, grad(p[AB], x, yMinus1, z),\n\t\t\t\t\t\t\tgrad(p[BB], xMinus1, yMinus1, z))),\n\t\t\t\t\tlerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BA + 1], xMinus1, y, z - 1)),\n\t\t\t\t\t\tlerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n\t\t}\n\t}\n};\n\nmodule.exports = ImprovedNoise;\n\n\n//# sourceURL=webpack:///./node_modules/aframe-mountain-component/lib/ImprovedNoise.js?")}});